/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.objectenbench.view;

import java.awt.Point;
import java.util.ArrayList;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.widget.Widget;
import org.project.data.ObjectenBench;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.objectenbench.view//objectenbench//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "objectenbenchTopComponent",
        iconBase = "org/objectenbench/view/bluej-icon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.objectenbench.view.objectenbenchTopComponent")
@ActionReference(path = "Menu/Window", position = 20)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_objectenbenchAction",
        preferredID = "objectenbenchTopComponent"
)
@Messages({
    "CTL_objectenbenchAction=objectenbench",
    "CTL_objectenbenchTopComponent=objectenbench Window",
    "HINT_objectenbenchTopComponent=This is a objectenbench window"
})
public final class objectenbenchTopComponent extends TopComponent {

    public objectenbenchTopComponent() {
        initComponents();
        setName(Bundle.CTL_objectenbenchTopComponent());
        setToolTipText(Bundle.HINT_objectenbenchTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        objectenBenchPane = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(objectenBenchPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(objectenBenchPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane objectenBenchPane;
    // End of variables declaration//GEN-END:variables

    // Instance variables
    private ObjectenBenchGraphScene scene;

    @Override
    public void componentOpened() {
        ObjectenBench bench = ObjectenBench.getInstance();
        System.out.println("alle objecten" + bench.getObjBench());
        scene = tekenObjectenBench();
        objectenBenchPane.setViewportView(scene.createView());
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    public ObjectenBenchGraphScene tekenObjectenBench(){
        ObjectenBenchGraphScene scene = new ObjectenBenchGraphScene();
        Widget objWidget = null;
        ObjectenBench bench = ObjectenBench.getInstance();
        ArrayList<Object> alleObjecten = bench.getObjBench();
        int i = 0;
        for(Object obj:alleObjecten){
            String objectNode = obj.toString();
            objWidget = scene.addNode(obj);
            objWidget.setPreferredLocation(new Point(i*50,0));
            i++;
        }
        return scene;
    }
}
